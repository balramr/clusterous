---
- name: provision controller instance
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: provisioning cluster controller
      local_action:
        module: ec2
        aws_access_key: "{{ AWS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET }}"
        region: "{{ region }}"
        key_name: "{{ keypair }}"
        instance_type: "{{ controller_instance_type }}"
        image: "{{ controller_ami_id }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        assign_public_ip: yes
        wait: yes
        group: "{{ security_group_name }}"
        instance_tags:
          Name: "{{ controller_instance_name }}"
        exact_count: 1
        count_tag:
          Name: "{{ controller_instance_name }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 20
            delete_on_termination: true
      register: ec2

    - name: create and attach volume to master
      local_action:
        module: ec2_vol
        volume_size: 20
        device_name: /dev/sdf
        region: "{{ region }}"
        instance: "{{ item.id }}"
      register: ec2_volume
      with_items: ec2.instances

    - name: debug
      debug: msg="{{ ec2_volume }}"

    - name: tag volume
      local_action: ec2_tag
      args:
        resource: "{{ ec2_volume.results[0].volume_id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ cluster_name }}"

    - name: record controller ip
      copy: content={{ item.public_ip }} dest={{ current_controller_ip_file }}
      with_items: ec2.instances

    - name: add new instance to host group
      add_host: hostname={{ item.public_ip }} groupname={{ controller_instance_name }}
      with_items: ec2.instances

    - name: Wait for ssh to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: ec2.instances

- name: configure controller
  hosts: "{{ controller_instance_name }}"
  user: root
  sudo: True
  vars:
    central_logging_level: '{{ central_logging_level }}'
  tasks:
    - name: add entry to hosts file
      lineinfile: dest=/etc/hosts line="127.0.0.1 controller registry"

    - name: check if registry is running
      shell: curl -I http://registry:5000/
      register: result
      ignore_errors: True

    - name: docker private registry
      shell: docker run -d
        -e SETTINGS_FLAVOR=s3
        -e AWS_BUCKET={{ clusterous_s3_bucket }}
        -e STORAGE_PATH={{ registry_s3_path }}
        -e AWS_KEY={{ AWS_KEY }}
        -e AWS_SECRET={{ AWS_SECRET }}
        -p 5000:5000 registry
      when: result|failed

    # Mount volume
    - name: format ebs
      shell: mkfs -t ext4 /dev/xvdf
    - file: path=/home/data state=directory mode=0755
    - name: mount volume /home/data
      mount: name=/home/data src=/dev/xvdf fstype=ext4 state=mounted

    # NFS share
    - name: nfs share
      lineinfile: dest=/etc/exports line="/home/data            *(rw,sync,no_root_squash,no_all_squash)"
    - name: restart nfs
      shell: systemctl restart nfs-server

    # DNS
    - name: get default DNS resolver ip
      shell: grep 'nameserver' /etc/resolv.conf | awk '{ print $2 }'
      register: default_dns_ip
    - name: Add default DNS resolver to mesos-dns
      shell: sed -i -- 's/\["8.8.8.8"\]/\["{{ default_dns_ip.stdout }}"\,"8.8.8.8"\]/g' /opt/mesos-dns/config.json
    - name: check if mesos-dns is running
      shell: ps aux | grep mesos-dns
      register: result
      ignore_errors: True
    - name: start mesos-dns
      shell: service mesos-dns start
      when: result.stdout.find('config.json') == -1

    # Use its own DNS resolver
    - name: mesos-dns
      lineinfile: dest=/etc/resolv.conf regexp='^nameserver' line="nameserver {{ ansible_eth0.ipv4.address }}" mode=0755

    # Copy remote ansible scripts
    - name: copy remote ansible scripts
    # Create Clusterous directory on controller
      file: path=/root/{{ remote_host_scripts_dir }} state=directory mode=0755
    - copy: src={{ remote_scripts_dir }}/ dest=/root/{{ remote_host_scripts_dir }}
    - copy: src={{ remote_scripts_dir }}/ansible.cfg dest=/root/.ansible.cfg

    # Central logging
    - lineinfile: dest=/etc/hosts line="{{ central_logging_ip }} central_logging"
      when: central_logging_level > 1
    - name: check if rsyslog is forwarding to logstash
      shell: cat /etc/rsyslog.conf| grep 5514
      register: result
      ignore_errors: True
      when: central_logging_level > 1
    - name: Rsyslog to logstash
      shell: echo '*.* @central_logging:5514' >> /etc/rsyslog.conf
      when: central_logging_level > 1 and result.stdout.find('5514') == -1
    - name: Restart rsyslog
      shell: service rsyslog restart
      when: central_logging_level > 1
